// Remove command prefix
PennController.ResetPrefix(null);

// Turn off debugger - keep on when building exp., turn off when running exp.
DebugOff();

// Inserts breaks within items and fillers
function InsertBreaks(items) {
    this.args = items.args;
    
    this.run = function(arrays) {
        var results = evenShuffle(arrays);
//n is the number of items after which there is a break        
	var n = trials_before_break; 
        for (var i = 0; i < results.length; ++i) {
            if (i % n == (n-1)) {
                results[i].push(
                    new DynamicElement(
                        "PennController",
                        newTrial("break",
                            newText("break", break_screen_text)
                                .center()
                                .print()
                            ,
                            newKey("keypress", " ")
                                .wait()
                        ),
                        true
                    )
                );
            }
        }
        
        return results;
    }
}
function insertBreaks(items) {
    return new InsertBreaks(items);
}


// Increment the counter for list balancing;
// Use when sending experiment link online, unnecessary otherwise
SetCounter("counter", "inc", 1);

// Sequence of the experiment
Sequence("consent", "demographics", "instructions", "practice", "practice-end",
         shuffle(randomize("experimental-trial")),
         "done", "debriefing", "send", "completion_screen");

// Consent form
newTrial("consent",
    newHtml("consent_form", "consent.html")
        .cssContainer({"width":"1000px"})
        .checkboxWarning("You must consent in order to participate in the experiment")
        .center()
        .print()
    ,
    newButton("continue", "Continue")
        .center()
        .print()
        .wait(getHtml("consent_form").test.complete()
                  .failure(getHtml("consent_form").warn()))
);

// Demographics
newTrial("demographics",
    newHtml("demographics_form", "demographics.html")
        .cssContainer({"width":"1000px"})
        .center()
        .print()
        .log()
    ,
    newTimer(20)
        .start()
        .wait()
    ,
    newFunction( ()=>window.scrollTo(0,0) )
        .call()
    ,
    newButton("continue", "Continue")
        .center()
        .print()
        .wait(getHtml("demographics_form").test.complete()
            .failure(getHtml("demographics_form").warn()))
);

// Instructions
newTrial("instructions",
    newHtml("instructions", "instructions.html")
        .cssContainer({"width":"1000px"})
        .center()
        .print()
    ,
    newTimer(20).start().wait()
    ,
    newFunction( ()=>window.scrollTo(0,0) ).call()
    ,
    newButton("continue", "Continue")
        .center()
        .print()
        .wait(getHtml("instructions").test.complete())
);

// Practice
Template("demo_practice.csv", row =>
    newTrial("practice",
        // Show context
        newText("context", row.context)
            .center() // Center the context text
            .print()
        ,
        newKey(" ")
            .wait()
        ,
        getText("context")
            .remove()
        ,
        newTimer(context_break_duration).start().wait()  // context_break_duration break after context
        ,
        newController("DashedSentence", {s: row.sentence}) // "DashedSentence" is the mode of presentation; ".sentence" is the name of the relevant column in the csv file
            .center()
            .print()
            .log()
            .wait()
            .remove()
        ,
        // Question with two possible answers
        newText("question", row.question)
            .center() // Center the context text
            .print()
            .log()

        ,
        newCanvas("answers", 500, 100)
            .add(100, 0, newText("F", "F: " + row.SECOND))
            .add(300, 0, newText("J", "J: " + row.FIRST))
            .center()
            .print()
        ,
        newKey("answer", "FJ")
            .wait()
            .log()
        ,
        getText("question")
            .remove()
        ,
        getCanvas("answers")
            .remove()
    )
    .log("group", row.group)
    .log("context", row.context)
    .log("sentence", row.sentence)
    .log("question", row.question)
);

// Practice-end
newTrial("practice-end",
    newText("practice-end", practice_end_text)    
        .cssContainer({"font-size": "15px", "margin-top":"2em"})
        .center()
        .print()
    ,
    newButton("continue", "Continue")
        .center()
        .print()
        .cssContainer({"margin-top":"2em"})
        .wait()
);

// Experimental trial
Template("demo_items.csv", row =>
    newTrial("experimental-trial",
        // Show context
        newText("context", row.context)
            .center() // Center the context text
            .print()
        ,
        newKey(" ")
            .wait()
        ,
        getText("context")
            .remove()
        ,
        newTimer(context_break_duration).start().wait()  // context_break_duration ms break after context
        ,
        newController("DashedSentence", {s: row.sentence}) // "DashedSentence" is the mode of presentation; ".sentence" is the name of the relevant column in the csv file
            .center()
            .print()
            .log()
            .wait()
            .remove()
        ,
        // Question with two possible answers
        newText("question", row.question)
            .center() // Center the context text
            .print()
            .log()

        ,
        newCanvas("answers", 500, 100)
            .add(100, 0, newText("F", "F: " + row.SECOND))
            .add(300, 0, newText("J", "J: " + row.FIRST))
            .center()
            .print()
        ,
        newKey("answer", "FJ")
            .wait()
            .log()
        ,
        getText("question")
            .remove()
        ,
        getCanvas("answers")
            .remove()
    )
    .log("group", row.group)
    .log("set", row.set)
    .log("condition", row.condition)
    .log("sentence", row.sentence)
    .log("question", row.question)
);

// Send results manually
SendResults("send");

// Done
newTrial("done",
    newHtml("done", "done.html")
        .cssContainer({"width":"720px"})
        .center()
        .log()
        .print()
    ,
    newButton("continue", "המשך")
        .center()
        .print()
        .wait()
);

// Debriefing
newTrial("debriefing",
    newHtml("debriefing_form", "debriefing.html")
        .cssContainer({"width":"720px"})
        .checkboxWarning("יש למלא את הפרטים על מנת שנוכל להעביר את התשלום")
        .center()
        .log()
        .print()
    ,
    newButton("continue", "לחצו להמשך")
        .center()
        .print()
        .wait(getHtml("debriefing_form").test.complete()
                  .failure(getHtml("debriefing_form").warn()))
);

// Completion screen
newTrial("completion_screen",
    newText("thanks", completion_text)
        .center()
        .print()
    ,
    newButton("end experiment", "סיום")
        .center()
        .print()
        .wait()
);

